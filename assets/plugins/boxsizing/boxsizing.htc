<component lightWeight="true">
<attach event="onpropertychange" onevent="checkPropertyChange()" />
<attach event="ondetach" onevent="restore()" />
<script>
//<![CDATA[


// Exclude IE8
if(typeof(document.body.style.boxSizing) != "undefined"){


var doc = element.document;

function init() {
	updateBorderBoxWidth();
	updateBorderBoxHeight();
}

function restore() {
	element.runtimeStyle.width = "";
	element.runtimeStyle.height = "";
}

/* Taken from Dean Edward's IE7 framework,
 * added by Schepp on 12.06.2010.
 * http://code.google.com/p/ie7-js/
 * MIT License (http://www.opensource.org/licenses/mit-license.php)
 *
 * Allows us to convert from relative to pixel-values.
 *
 * Citing Dean himself:
 * "MSIE6+ has special pixelLeft/Width/Height etc properties. 
 * They represent the current pixel value of the equivalent style setting. 
 * So, if you have style.width=8em then style.pixelWidth would return the 
 * pixel equivalent. MSIE also supports an override style called runtimeStyle. 
 * Setting properties on runtimeStyle overrides all other style properties.
 *
 * This trick works by setting style.left and then getting MSIE to convert 
 * it by calling style.pixelLeft. To stop the element moving around the screen 
 * when we do this, we set runtimeStyle.left with the current left value. 
 * After weâ€™ve done the conversion we set everything back to the way it was.
 *
 * http://ajaxian.com/archives/computed-vs-cascaded-style
 */
function getPixelValue(value) {
	var PIXEL = /^\d+(px)?$/i;
	if (PIXEL.test(value)) return parseInt(value);
	var style = element.style.left;
	var runtimeStyle = element.runtimeStyle.left;
	element.runtimeStyle.left = element.currentStyle.left;
	element.style.left = value || 0;
	value = parseInt(element.style.pixelLeft);
	element.style.left = style;
	element.runtimeStyle.left = runtimeStyle;
	
	return value;
}

/* border width getters */
function getBorderWidth(sSide) {
	if (element.currentStyle["border" + sSide + "Style"] == "none")
		return 0;
	var n = getPixelValue(element.currentStyle["border" + sSide + "Width"]);
	return n || 0;
}

function getBorderLeftWidth() { return getBorderWidth("Left"); }
function getBorderRightWidth() { return getBorderWidth("Right"); }
function getBorderTopWidth() { return getBorderWidth("Top"); }
function getBorderBottomWidth() { return getBorderWidth("Bottom"); }
/* end border width getters */

/* padding getters */
function getPadding(sSide) {
	var n = getPixelValue(element.currentStyle["padding" + sSide]);
	return n || 0;
}

function getPaddingLeft() { return getPadding("Left"); }
function getPaddingRight() { return getPadding("Right"); }
function getPaddingTop() { return getPadding("Top"); }
function getPaddingBottom() { return getPadding("Bottom"); }
/* end padding getters */

function getBoxSizing() {
	var s = element.style;
	var cs = element.currentStyle

	if (typeof s.boxSizing != "undefined" && s.boxSizing != "")
		return s.boxSizing;
	if (typeof s["box-sizing"] != "undefined" && s["box-sizing"] != "")
		return s["box-sizing"];
	if (typeof cs.boxSizing != "undefined" && cs.boxSizing != "")
		return cs.boxSizing;
	if (typeof cs["box-sizing"] != "undefined" && cs["box-sizing"] != "")
		return cs["box-sizing"];
	return getDocumentBoxSizing();
}

function getDocumentBoxSizing() {
	if (doc.compatMode == null || doc.compatMode == "BackCompat")
		return "border-box";
	return "content-box"
}

/* width and height setters */
function setBorderBoxWidth(n) {
	element.runtimeStyle.width = Math.max(0, n - getBorderLeftWidth() -
		getPaddingLeft() - getPaddingRight() - getBorderRightWidth()) + "px";
}

function setBorderBoxHeight(n) {
	element.runtimeStyle.height = Math.max(0, n - getBorderTopWidth() -
		getPaddingTop() - getPaddingBottom() - getBorderBottomWidth()) + "px";
}

function setContentBoxWidth(n) {
	element.runtimeStyle.width = Math.max(0, n + getBorderLeftWidth() +
		getPaddingLeft() + getPaddingRight() + getBorderRightWidth()) + "px";
}

function setContentBoxHeight(n) {
	element.runtimeStyle.height = Math.max(0, n + getBorderTopWidth() +
		getPaddingTop() + getPaddingBottom() + getBorderBottomWidth()) + "px";
}
/* end width and height setters */

function updateBorderBoxWidth() {
	element.runtimeStyle.width = "";
	if (getDocumentBoxSizing() == getBoxSizing())
		return;
	var csw = element.currentStyle.width;
	if (csw != "auto") {
		csw = getPixelValue(element.currentStyle.width);
		if (getBoxSizing() == "border-box")
			setBorderBoxWidth(parseInt(csw));
		else
			setContentBoxWidth(parseInt(csw));
	}
}

function updateBorderBoxHeight() {
	element.runtimeStyle.height = "";	
	if (getDocumentBoxSizing() == getBoxSizing())
		return;
	var csh = element.currentStyle.height;
	if (csh != "auto") {
		csh = getPixelValue(element.currentStyle.height);
		if (getBoxSizing() == "border-box")
			setBorderBoxHeight(parseInt(csh));
		else
			setContentBoxHeight(parseInt(csh));
	}
}

function checkPropertyChange() {
	var pn = event.propertyName;
	var undef;

	if (pn == "style.boxSizing" && element.style.boxSizing == "") {
		element.style.removeAttribute("boxSizing");
		element.runtimeStyle.boxSizing = undef;		
	}


	switch (pn) {
		case "style.width":
		case "style.borderLeftWidth":
		case "style.borderLeftStyle":
		case "style.borderRightWidth":
		case "style.borderRightStyle":
		case "style.paddingLeft":
		case "style.paddingRight":
			updateBorderBoxWidth();
			break;
		
		case "style.height":
		case "style.borderTopWidth":
		case "style.borderTopStyle":
		case "style.borderBottomWidth":
		case "style.borderBottomStyle":
		case "style.paddingTop":
		case "style.paddingBottom":
			updateBorderBoxHeight();
			break;
		
		case "className":
		case "style.boxSizing":
			updateBorderBoxWidth();
			updateBorderBoxHeight();
			break;
	}
}

init();

} // End exclude IE8

//]]>
</script>
</component>
